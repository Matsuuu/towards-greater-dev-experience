import { ChildViewRoute, RedirectRoute, Route, RouteQueryObject, ViewRoute } from "./route";
import { SuuntaView } from "./view";
type SuuntaTarget = HTMLElement | DocumentFragment;
export interface SuuntaInitOptions {
    routes: Route[];
    renderer?: (viewToRender: unknown, route: ViewRoute, renderTarget: SuuntaTarget) => void;
    target?: string | SuuntaTarget;
    base?: string;
}
export declare class Suunta {
    #private;
    private options;
    routes: Map<string, Route>;
    routeMatchers: Map<RegExp, Route>;
    started: boolean;
    constructor(options: SuuntaInitOptions);
    private mapRoutes;
    private mapRoute;
    start(): Promise<void>;
    private setupListeners;
    private getTarget;
    navigateTo(routeQueryObject: RouteQueryObject): Promise<void>;
    getRoute(routeQueryObject: RouteQueryObject): Route | undefined;
    private getRouteFromCurrentURL;
    private navigate;
    handleViewRoute(route: ViewRoute | ChildViewRoute): Promise<void>;
    handleRedirectRoute(route: RedirectRoute): Promise<void>;
    render(viewToRender: unknown, route: ViewRoute, parentRenderTarget?: SuuntaTarget): void;
    getCurrentView(): SuuntaView | undefined;
}
export {};
